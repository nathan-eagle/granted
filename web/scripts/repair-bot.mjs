import { execSync } from "node:child_process"
import fs from "node:fs"
import path from "node:path"
import process from "node:process"

const repo = process.env.REPO
const runId = process.env.RUN_ID
const token = process.env.GITHUB_TOKEN

if (!repo || !runId || !token) {
  console.error("Missing required environment (REPO, RUN_ID, GITHUB_TOKEN)")
  process.exit(1)
}

function runGh(cmd, options = {}) {
  return execSync(`gh ${cmd}`, { encoding: "utf8", ...options })
}

function ensureGh() {
  try {
    execSync("gh --version", { stdio: "ignore" })
  } catch {
    console.log("::group::Install gh CLI")
    execSync("sudo apt-get update", { stdio: "inherit" })
    execSync("sudo apt-get install -y gh", { stdio: "inherit" })
    console.log("::endgroup::")
  }
}

function fetchArtifacts() {
  const json = runGh(`api repos/${repo}/actions/runs/${runId}/artifacts -H 'Accept: application/vnd.github+json'`)
  return JSON.parse(json).artifacts || []
}

function downloadArtifact(artifact) {
  const dest = path.join(process.cwd(), `artifact-${artifact.id}.zip`)
  try {
    execSync(`gh api repos/${repo}/actions/artifacts/${artifact.id}/zip > ${dest}`)
    return dest
  } catch (error) {
    console.error("Artifact download failed", error)
    return null
  }
}

function openIssue(title, body) {
  try {
    runGh(`issue create --repo ${repo} --title ${JSON.stringify(title)} --body ${JSON.stringify(body)}`)
  } catch (error) {
    console.error("Issue creation failed", error)
  }
}

function createBranch(branch) {
  execSync(`git checkout -b ${branch}`, { stdio: "inherit" })
}

function commitAndPush(branch, message) {
  execSync("git add -A", { stdio: "inherit" })
  execSync(
    `git -c user.name=repair-bot -c user.email=repair@users.noreply.github.com commit -m ${JSON.stringify(message)} || true`,
    { stdio: "inherit" }
  )
  execSync(`git push -u origin ${branch}`, { stdio: "inherit" })
}

function openPullRequest(branch, title, body) {
  try {
    runGh(`pr create --repo ${repo} --head ${branch} --base main --title ${JSON.stringify(title)} --body ${JSON.stringify(body)}`)
  } catch (error) {
    console.error("PR creation failed", error)
  }
}

function parseMissingModule(logs) {
  const match = logs.match(/Cannot find module '([^']+)'/)
  return match?.[1] ?? null
}

function safeAddDependency(pkgName) {
  const pkgPath = path.join("web", "package.json")
  if (!fs.existsSync(pkgPath)) return false
  const pkg = JSON.parse(fs.readFileSync(pkgPath, "utf8"))
  pkg.dependencies = pkg.dependencies || {}
  if (!pkg.dependencies[pkgName]) {
    pkg.dependencies[pkgName] = "latest"
    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2))
    try {
      execSync("cd web && npm i --package-lock-only", { stdio: "inherit" })
    } catch (error) {
      console.error("npm install failed", error)
    }
    return true
  }
  return false
}

function bufferLogs() {
  let logs = ""

  try {
    const workflowLogs = runGh(`run view ${runId} --repo ${repo} --log`, { maxBuffer: 10 * 1024 * 1024 })
    logs += `\n# Workflow Logs\n\n${workflowLogs}\n`
  } catch (error) {
    console.error("Fetching workflow logs failed", error)
  }

  const artifacts = fetchArtifacts()
  for (const artifact of artifacts) {
    const file = downloadArtifact(artifact)
    if (file) {
      logs += `\n# Artifact: ${artifact.name}\nStored at ${file}\n`
    }
  }

  return logs
}

async function main() {
  ensureGh()

  const logs = bufferLogs()
  const missingModule = parseMissingModule(logs)
  let openedFix = false

  if (missingModule) {
    const branch = `repair/missing-${missingModule.replace(/[^a-z0-9-]/gi, "-")}-${Date.now()}`
    try {
      createBranch(branch)
      if (safeAddDependency(missingModule)) {
        commitAndPush(branch, `fix(ci): add missing dependency ${missingModule}`)
        openPullRequest(
          branch,
          `fix(ci): add missing dependency ${missingModule}`,
          `Auto-generated by repair bot for workflow run ${runId}`
        )
        openedFix = true
      }
    } catch (error) {
      console.error("Auto-fix branch failed", error)
      execSync("git checkout -", { stdio: "inherit" })
    }
  }

  const issueTitle = `CI failure on workflow run ${runId}`
  const issueBody = `Automated repair bot summary for run ${runId}.\n\n\`\`\`\n${logs.slice(0, 60000)}\n\`\`\`\n\n${openedFix ? "Opened an auto-fix PR." : "No auto-fix applied."}`
  openIssue(issueTitle, issueBody)
}

main().catch((error) => {
  console.error(error)
  process.exit(1)
})
