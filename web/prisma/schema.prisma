generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // App relations
  projects  Project[]
  jobs      Job[]
  grants    Grant[]
  createdAt DateTime  @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Project {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses           Response[]
  jobs                Job[]
  grants              Grant[]
  // Autopilot extensions
  agencyPackId        String?
  status              String?
  charterJson         Json?
  factsJson           Json?
  coverageJson        Json?
  rfpNormJson         Json?
  rfpBundleMeta       Json?
  conflictLogJson     Json?
  eligibilityJson     Json?
  sloJson             Json?
  meta                Json?
  agentSessionId      String?              @unique
  sections            Section[]
  uploads             Upload[]
  projectMeta         ProjectMeta?
  agentWorkflowRuns   AgentWorkflowRun[]
  agentSessions       AgentSession[]
  primaryAgentSession AgentSession?        @relation("PrimaryAgentSession", fields: [agentSessionId], references: [id])
  knowledgeBases      AgentKnowledgeBase[]
  conflictLogs        AgentConflictLog[]
}

model TemplateCategory {
  id        String     @id @default(cuid())
  name      String
  order     Int        @default(0)
  templates Template[]
}

model Template {
  id         String  @id @default(cuid())
  categoryId String
  slug       String  @unique
  title      String
  about      String? @db.Text
  prompt     String  @db.Text
  model      String  @default("gpt-5-mini")
  order      Int     @default(0)
  emoji      String?
  icon       String?

  category  TemplateCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  fields    TemplateField[]
  responses Response[]
  jobs      Job[]
}

model TemplateField {
  id          String  @id @default(cuid())
  templateId  String
  key         String
  label       String
  type        String  @default("long")
  placeholder String?
  help        String?
  order       Int     @default(0)

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, key])
}

model Response {
  id         String   @id @default(cuid())
  projectId  String
  templateId String
  inputs     Json
  output     String?  @db.Text
  model      String
  tokenUsage Json?
  docUrl     String?
  createdAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  job      Job?
}

enum JobStatus {
  queued
  running
  succeeded
  failed
}

model Job {
  id         String    @id @default(cuid())
  userId     String
  projectId  String
  templateId String
  inputs     Json
  status     JobStatus @default(queued)
  progress   String?   @db.Text
  error      String?   @db.Text
  responseId String?   @unique
  startedAt  DateTime?
  finishedAt DateTime?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  response Response? @relation(fields: [responseId], references: [id])
}

// Grant Writing Models
model Grant {
  id        String @id @default(cuid())
  projectId String
  userId    String

  // Grant Information
  title      String
  agency     String?
  rfpUrl     String?   @db.Text
  deadline   DateTime?
  amount     String?
  rfpContent String?   @db.Text

  // Applicant Information
  applicantInfo Json? // CVs, LinkedIn, organization info
  teamMembers   Json? // Array of team member details

  // Proposal Information
  proposalIdea String? @db.Text
  keywords     String?

  // Sections
  sections GrantSection[]

  // Review
  mockReviews MockReview[]

  // Status
  status      GrantStatus @default(DRAFT)
  currentStep Int         @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GrantStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  COMPLETE
  SUBMITTED
}

model GrantSection {
  id         String  @id @default(cuid())
  grantId    String
  title      String
  order      Int
  content    String? @db.Text
  aiDraft    String? @db.Text
  userEdits  String? @db.Text
  isComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grant Grant @relation(fields: [grantId], references: [id], onDelete: Cascade)
}

model MockReview {
  id      String @id @default(cuid())
  grantId String

  reviewerName String
  reviewerRole String
  score        Int?
  strengths    String? @db.Text
  weaknesses   String? @db.Text
  suggestions  String? @db.Text

  createdAt DateTime @default(now())

  grant Grant @relation(fields: [grantId], references: [id], onDelete: Cascade)
}

// Autopilot models
model Section {
  id           String          @id @default(cuid())
  projectId    String
  key          String
  title        String
  order        Int
  contentMd    String          @default("")
  contentJson  Json?
  contentHtml  String?
  wordCount    Int             @default(0)
  limitWords   Int?
  slotsJson    Json?
  coverage     Json?
  formatLimits Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Project      Project         @relation(fields: [projectId], references: [id])
  sources      SectionSource[]
}

model Upload {
  createdAt          DateTime                 @default(now())
  id                 String                   @id @default(cuid())
  projectId          String
  kind               String
  kindDetail         String?
  filename           String
  url                String?
  openAiFileId       String?
  text               String?
  meta               Json?
  Project            Project                  @relation(fields: [projectId], references: [id])
  SectionSource      SectionSource[]
  knowledgeBaseFiles AgentKnowledgeBaseFile[]
}

model SectionSource {
  id        String  @id @default(cuid())
  sectionId String
  uploadId  String
  Section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  Upload    Upload  @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([sectionId, uploadId])
}

model Embedding {
  id        String   @id @default(cuid())
  projectId String
  uploadId  String
  chunk     String
  vector    Json
  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([uploadId])
}

model ProjectMeta {
  id              String    @id @default(cuid())
  projectId       String    @unique
  status          String?
  dueDate         DateTime?
  amountRequested String?
  amountAwarded   String?
  funder          String?
  programs        String?
  submissionLinks String?
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model AgentWorkflowRun {
  id             String    @id @default(cuid())
  workflowId     String
  projectId      String?
  agentSessionId String?
  status         String    @default("pending")
  input          Json?
  result         Json?
  metrics        Json?
  error          String?
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  project      Project?                @relation(fields: [projectId], references: [id], onDelete: SetNull)
  agentSession AgentSession?           @relation(fields: [agentSessionId], references: [id], onDelete: SetNull)
  events       AgentWorkflowRunEvent[]

  @@index([workflowId])
  @@index([projectId])
  @@index([agentSessionId])
}

model AgentWorkflowRunEvent {
  id        String   @id @default(cuid())
  runId     String
  type      String
  payload   Json?
  createdAt DateTime @default(now())

  run AgentWorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId, createdAt])
}

model AgentKnowledgeBase {
  id            String   @id @default(cuid())
  projectId     String
  provider      String   @default("openai")
  vectorStoreId String
  status        String   @default("pending")
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  files   AgentKnowledgeBaseFile[]

  @@unique([projectId])
  @@index([vectorStoreId])
}

model AgentKnowledgeBaseFile {
  id              String    @id @default(cuid())
  knowledgeBaseId String
  uploadId        String?
  vectorFileId    String?
  connectorId     String?
  source          String
  version         String?
  releasedAt      DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  knowledgeBase AgentKnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  upload        Upload?            @relation(fields: [uploadId], references: [id], onDelete: SetNull)

  @@unique([knowledgeBaseId, uploadId])
  @@index([knowledgeBaseId])
  @@index([uploadId])
}

model AgentConflictLog {
  id         String    @id @default(cuid())
  projectId  String
  key        String
  previous   Json?
  next       Json?
  status     String    @default("open")
  resolution String?
  resolvedAt DateTime?
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key])
  @@index([projectId, status])
}

model AgentSession {
  id             String   @id @default(cuid())
  projectId      String
  agentRunId     String?
  memoryId       String?
  transcriptJson Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project        Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  primaryProject Project?           @relation("PrimaryAgentSession")
  workflowRuns   AgentWorkflowRun[]

  @@unique([agentRunId])
  @@index([projectId])
}

model RFP {
  id           String        @id @default(cuid())
  source       String
  oppNumber    String?
  title        String?
  agency       String?
  postedDate   DateTime?
  closeDate    DateTime?
  synopsis     String?
  raw          Json?
  attachments  Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  requirements Requirement[]
}

model Requirement {
  id           String  @id @default(cuid())
  rfpId        String
  key          String?
  title        String
  targetWords  Int?
  required     Boolean @default(true)
  instructions String?
  RFP          RFP     @relation(fields: [rfpId], references: [id])
}

model AgentRun {
  id        String     @id @default(cuid())
  rfpId     String?
  projectId String?
  status    String     @default("created") // created|running|done|error
  steps     Json?
  scores    Json?
  docxUrl   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  eventLogs EventLog[]
}

model EventLog {
  id         String   @id @default(cuid())
  agentRunId String?
  level      String   @default("info")
  message    String
  data       Json?
  requestId  String?
  createdAt  DateTime @default(now())

  agentRun AgentRun? @relation(fields: [agentRunId], references: [id], onDelete: SetNull)

  @@index([agentRunId])
}
